package ru.startandroid.develop.testprojectnavigation.utils

//! Google cloud with access to api key for google maps for our project
//? https://console.cloud.google.com/apis/credentials?highlightKey=2da91166-3831-4f9a-b369-fd0c15950d98&project=electric-totem-310006

/**  appBarConfiguration нужен чтобы отметить высокоуровневые фрагменты т.е. те фрагменты после перехода на которые
     не будет на верху показываться backButton. appBarConfiguration нужно передать в setupActionBarWithNavController
     чтобы он заробатал.*/
fun explainAppBar() {}


/** подключаем верхний тулбар так чтобы он показывался во всех фрагментах.То что мы настраиваем тут имеет эффект на все
    фрагменты поэтому мы объявили bottomNavigation напрямую в фрагментах т.к. он нам не нужен во всех фрагментах*/
fun explainSetSupportActionBar() {}


/** подключение binding для активити немного отличается от процесса подключение binding к фрагменту
    но код всегда одинаковый так что можно просто записать где-нибудь. */
fun explainBinding() {}

/** Теперь нам нужно выяснить, что на самом деле фотография внутри нашего приложения.
 * через полученный объект (data) мы можем получить доступ к Uri выбранной фотографии.
 * Uri представляет собой местоположение выбранной фотографии внутри устройства.
 * И используя этот URI, мы можем получить доступ к изображению в виде bitmap изображения.
 * Мы должны использовать два разных способа получения изображений через bitmap изображение,
 * потому что getBitmap не устарел в версии 28 SDK. Поэтому, мы используем два метода для
 * получения bitmap один для версий ниже 28 и другой для версий выше 28.*/
fun explainActivityForResultPhoto() {}

/** 1) Аргумент view - это тот view к которому будет привязано это menu т.е. оно будет вспылвать рядом
 * с этим указанным view.
 * 2) Аргумент menu - это ресурс menu который будет показываться, т.к. этот метод используется в двух местах
 * у которых внешний вид меню разные нам нужно указать через этот аргумент какое меню мы хотим отобразить.
 * 3) Аргумент messageString и secondMessageString - это сообщения которые передаются в toast при нажатии одного
 * из двух элементов меню. Так как у обоих меню есть только два элемента мы их передаем в зависимости от того какое
 * меню вызывается
 * 4) Аргумент menuItemId - это id элементов меню которые мы передаем. При нажатии первого элемента показывается
 * в тосте первое сообщение и т.д.
 * 5) Аргумент textView? - этот аргумент нужен чтобы во первых определить откуда вызывает этот метод, если вызов
 * метода происходит из фрагмента сообщений то textView не будет равен null. Мы передаем туда textView из разных
 * viewHolder потому что там у нас не одинкавый textView а два разных, для сообщений справа и слева.*/
fun explainArgumentsPopup() {}

/** 1) clickedItemHeader - это заголовок который передается в фрагмент деталей, к примеру: Потерял Кота!
 * 2) clickedItemDescription - это описание потерянного предмета которое необходимо передать в фрагмент детали
 * 3) clickedItemLocation - это передается чтобы потом из фрагмента детали дальше передать в фрагмент с картой
 * это ярлык с названием места где потеряна вещь
 * 4) clickedItemNorth & clickedItemEast points - это координаты, ширина и долгота которую передаем в фрагмент с
 * деталями чтобы оттуда уже дальше при нажатии отправить их в фрагмент с картой чтобы при открытии карты она открывалась
 * на нужной позиции
 * 5) clickedItemAdType - это тип потерянной вещи, к примеру: Тип докуметы
 * 6) clickedItemAdTypeObject - это сама вещь которая была потеряна, например: Паспорт
 * 7) clickedItemCategory - это категория к которой относится потеранная вещь.*/
fun explainClickedArguments() {}

/** 1) Тут с expandable view принцип всегда одинаковый. Мы по нажатию на текст говорим тому expandable view который находится
 * прямо под нажатым текстом раскрываться вызывая его метод expand(). Также мы делаем проверку, если этот expandable view
 * на момент нажатия уже был раскрыт то мы вызываем его метод collapse() чтобы уже скрыть его.
 * 2) Разница между FragmentAbout и FragmentReview лишь в том что мы перед тем как раскрыть expandable view также делаем проверку
 * чтобы посмотреть не открыт ли еще один expandable view на этом экрана и если он открыт то закрываем открытый и открываем тот
 * на который нажали*/
fun explainExpandableViews() {}

/** Интерфейс который должны имплементировать классы которые хотят пользоваться данным адаптером. Нужен для того чтобы передовать при клике
 * позицию нажетого элемента из recyclerView. Имплементировав этот интерфейс в переопределенном методе мы уже указываем что мы хотим сделать
 * при нажатии на конкретный элемент в recyclerView.*/
fun explainOnItemClickListener() {}













